generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  phone            String
  email            String            @unique
  password         String
  inventoryManager InventoryManager?
  salesperson      Salesperson?

  @@map("users")
}

model Store {
  id                  Int                   @id @default(autoincrement())
  address             String
  neighborhood        String
  capital             Int
  name                String
  financial_movements financial_movements[]
  inventory           Inventory?
  inventoryManager    InventoryManager?

  @@map("stores")
}

model InventoryManager {
  userId  Int     @id
  storeId Int     @unique
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]

  @@map("inventory_managers")
}

model Salesperson {
  userId      Int        @id
  inventoryId Int?
  orders      Order[]
  inventory   Inventory? @relation("SalespersonInventory", fields: [inventoryId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("salespeople")
}

model Inventory {
  id              Int           @id @default(autoincrement())
  type            String
  storeId         Int?          @unique
  batches         Batch[]
  store           Store?        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  offeredProducts Product[]
  salespeople     Salesperson[] @relation("SalespersonInventory")

  @@map("inventories")
}

model Product {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  category    String
  price       Int
  available   Boolean    @default(true)
  inventoryId Int?
  batches     Batch[]
  orders      Order[]
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])

  @@map("products")
}

model Batch {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  quantity       Int
  expirationDate DateTime
  location       String
  productId      Int
  inventoryId    Int
  inventory      Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orders         Order[]

  @@map("batches")
}

model Order {
  id                 Int              @id @default(autoincrement())
  status             String
  quantity           Int
  price              Int
  inventoryManagerId Int
  salespersonId      Int
  productId          Int
  sentBatchId        Int?
  inventoryManager   InventoryManager @relation(fields: [inventoryManagerId], references: [userId], onDelete: Cascade)
  product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  salesperson        Salesperson      @relation(fields: [salespersonId], references: [userId], onDelete: Cascade)
  sentBatch          Batch?           @relation(fields: [sentBatchId], references: [id])

  @@map("orders")
}

model financial_movements {
  id          String   @id
  type        String
  amount      Decimal  @db.Decimal(10, 2)
  description String
  date        DateTime @default(now())
  storeId     Int?
  stores      Store?   @relation(fields: [storeId], references: [id])
}

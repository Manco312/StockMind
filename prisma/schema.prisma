generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id               Int               @id @default(autoincrement())
  name             String
  phone            String
  email            String            @unique
  password         String
  inventoryManager InventoryManager?
  salesperson      Salesperson?
  notifications    Notification[]

  @@map("users")
}

model Store {
  id               Int               @id @default(autoincrement())
  address          String
  neighborhood     String
  capital          Int
  name             String
  inventory        Inventory?
  inventoryManager InventoryManager?
  alerts Alert[]

  @@map("stores")
}

model InventoryManager {
  userId  Int     @id
  storeId Int     @unique
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]

  @@map("inventory_managers")
}

model Salesperson {
  userId      Int        @id
  inventoryId Int?
  inventory   Inventory? @relation("SalespersonInventory", fields: [inventoryId], references: [id])
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders      Order[]

  @@map("salespeople")
}

model Inventory {
  id              Int           @id @default(autoincrement())
  type            String
  storeId         Int?          @unique
  batches         Batch[]
  store           Store?        @relation(fields: [storeId], references: [id], onDelete: Cascade)
  offeredProducts Product[]
  salespeople     Salesperson[] @relation("SalespersonInventory")

  @@map("inventories")
}

model Product {
  id           Int        @id @default(autoincrement())
  title        String
  description  String
  category     String
  price        Int
  available    Boolean    @default(true)
  minimumStock Int        @default(0)
  inventoryId  Int?
  batches      Batch[]
  orders       Order[]
  alerts       Alert[]
  inventory    Inventory? @relation(fields: [inventoryId], references: [id])

  @@map("products")
}

model Batch {
  id             Int       @id @default(autoincrement())
  code           String    @unique
  quantity       Int
  expirationDate DateTime
  location       String
  productId      Int
  inventoryId    Int
  inventory      Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  product        Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  orders         Order[]

  @@map("batches")
}

model Order {
  id                 Int              @id @default(autoincrement())
  status             String
  quantity           Int
  price              Int
  inventoryManagerId Int
  salespersonId      Int
  productId          Int
  sentBatchId        Int?
  createdAt          DateTime         @default(now())
  inventoryManager   InventoryManager @relation(fields: [inventoryManagerId], references: [userId], onDelete: Cascade)
  product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  salesperson        Salesperson      @relation(fields: [salespersonId], references: [userId], onDelete: Cascade)
  sentBatch          Batch?           @relation(fields: [sentBatchId], references: [id])
  notifications      Notification[]

  @@map("orders")
}

model Alert {
  id           Int      @id @default(autoincrement())
  type         String   @default("LOW_STOCK")
  message      String
  createdAt    DateTime @default(now())
  resolved     Boolean  @default(false)
  productId    Int
  product      Product  @relation(fields: [productId], references: [id])
  storeId      Int
  store        Store    @relation(fields: [storeId], references: [id])

  @@map("alerts")
}

model Notification {
  id           Int      @id @default(autoincrement())
  title        String
  message      String
  type         String   // "ORDER_CREATED" | "ORDER_STATUS_CHANGED" | etc.
  createdAt    DateTime @default(now())
  read         Boolean  @default(false)
  recipientId  Int
  recipient    User     @relation(fields: [recipientId], references: [id])
  orderId      Int?
  order        Order?   @relation(fields: [orderId], references: [id])

  @@map("notifications")
}

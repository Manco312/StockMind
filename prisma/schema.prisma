generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        Int     @id @default(autoincrement())
  name      String
  phone     String
  email     String  @unique
  password  String

  // Relations for inherited models
  inventoryManager InventoryManager?
  salesperson      Salesperson?

  @@map("users")
}

model Store {
  id                Int     @id @default(autoincrement())
  address           String
  neighborhood      String
  capital           Int

  // Relations
  inventoryManager  InventoryManager?
  inventory         Inventory?

  @@map("stores")
}

model InventoryManager {
  id      Int @id @default(autoincrement())
  userId  Int @unique
  storeId Int @unique

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  store   Store   @relation(fields: [storeId], references: [id], onDelete: Cascade)
  orders  Order[]

  @@map("inventory_managers")
}


model Salesperson {
  id      Int @id @default(autoincrement())
  userId  Int @unique

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]

  @@map("salespeople")
}

model Inventory {
  id                Int     @id @default(autoincrement())
  type              String  // "Store" or "Distributor"
  storeId           Int?    @unique

  // Relations
  store             Store?      @relation(fields: [storeId], references: [id], onDelete: Cascade)
  offeredProducts   Product[]
  batches           Batch[]

  @@map("inventories")
}

model Product {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  category    String
  price       Int
  available   Boolean @default(true)

  // Relations
  inventoryId Int?
  inventory   Inventory? @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
  batches     Batch[]
  orders      Order[]

  @@map("products")
}

model Batch {
  id             Int      @id @default(autoincrement())
  code           String   @unique
  quantity       Int
  expirationDate DateTime
  location       String

  // Relations
  productId      Int
  inventoryId    Int
  product        Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  inventory      Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  orders         Order[]

  @@map("batches")
}

model Order {
  id                Int     @id @default(autoincrement())
  status            String  // "pending", "received", "rejected"
  quantity          Int
  price             Int

  // Relations
  inventoryManagerId Int
  salespersonId      Int
  productId          Int
  sentBatchId        Int?

  inventoryManager   InventoryManager @relation(fields: [inventoryManagerId], references: [id], onDelete: Cascade)
  salesperson        Salesperson      @relation(fields: [salespersonId], references: [id], onDelete: Cascade)
  product            Product          @relation(fields: [productId], references: [id], onDelete: Cascade)
  sentBatch          Batch?           @relation(fields: [sentBatchId], references: [id], onDelete: SetNull)

  @@map("orders")
}

